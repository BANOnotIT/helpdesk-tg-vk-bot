class State:
    def transition_rule(self, msg):
        """
        Тут мы должны обязательно сказать, когда мы переходим к другому состоянию и отдать его.
        Ну или остаёмся на месте. Тогда выдаём `None`.
        :param msg:
        :return: State or None
        """
        raise NotImplementedError()

    def enter(self, msg):
        """
        Вызывается, когда мы приходим к этому состоянию, мы можем что-то сделать.
        Например сохранить это состояние или сказать пользователю,
        что он теперь находится в другом состоянии
        :param msg:
        :return:
        """
        pass

    def leave(self, msg):
        """
        Вызывается, когда мы покидаем какое-то состояние.
        Тут можно сказать прощальные слова или прибраться за какой-то сложной операцией.
        :param msg:
        :return:
        """
        pass

    def stay(self, msg):
        """
        Вызывается, когда мы не двигаемся никуда. Можем сказать пользователю, что он сделал неправильно.
        :param msg:
        :return:
        """
        pass


class Machine:
    def get_initial_state(self, msg):
        """
        Учим машину восстанавливать своё состояние. Чтобы машина знала кого спрашивать и что спрашивать.
        :param msg:
        :return: State
        """
        raise NotImplementedError

    def run(self, msg):
        """
        Тут и происходит вся магия перехода между состояниями.
        Сначала мы определяем текущее состояние, спрашиваем, нужно ли переходить, и если да, то переходим.
        :param msg:
        :return:
        """
        # Берём текущее состояние
        init_state = self.get_initial_state(msg)
        # Спрашиваем, надо ли двигаться куда-то в сторону
        next_state = init_state.transition_rule(msg)

        # Если переходим, то сначала уходим с предыдущего, а потом приходим к новому
        if next_state:
            init_state.leave(msg)
            next_state.enter(msg)

        # Перехода не случилось, значит возможно в текущем состоянии есть что сделать.
        else:
            init_state.stay(msg)
